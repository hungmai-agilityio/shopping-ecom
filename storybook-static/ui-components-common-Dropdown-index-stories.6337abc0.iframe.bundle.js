"use strict";(self.webpackChunkshopping_ecom=self.webpackChunkshopping_ecom||[]).push([[969],{"./src/ui/components/common/Dropdown/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/next@14.2.13_@babel+core@7.26.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/next@14.2.13_@babel+core@7.26.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js"),_ui_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/ui/components/index.ts");const __WEBPACK_DEFAULT_EXPORT__={component:_ui_components__WEBPACK_IMPORTED_MODULE_2__.ms,tags:["autodocs"],parameters:{layout:"centered"},argTypes:{styles:{description:"Custom css for dropdown container",control:"text"},menuButton:{description:"Label for click open content"},children:{description:"Content inside the dropdown",control:"text"},isOpen:{description:"Controls visibility of the dropdown",control:"boolean"},setVisible:{description:"Function to toggle dropdown visibility"}}},Default={render:args=>{const[isOpen,setVisible]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_ui_components__WEBPACK_IMPORTED_MODULE_2__.ms,{...args,isOpen,setVisible,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p",{children:args.children})})},args:{menuButton:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_ui_components__WEBPACK_IMPORTED_MODULE_2__.In,{src:"/arrow-bot.svg",alt:"icon",width:24,height:24}),children:"Content inside the dropdown"}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: args => {\n    const [isOpen, setVisible] = useState<boolean>(false);\n    return <Dropdown {...args} isOpen={isOpen} setVisible={setVisible}>\r\n        <p>{args.children}</p>\r\n      </Dropdown>;\n  },\n  args: {\n    menuButton: <Icon src="/arrow-bot.svg" alt="icon" width={24} height={24} />,\n    children: \'Content inside the dropdown\'\n  }\n}',...Default.parameters?.docs?.source}}}}}]);